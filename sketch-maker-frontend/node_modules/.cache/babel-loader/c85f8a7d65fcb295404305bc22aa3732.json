{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/c/Users/Zach/dev/flatiron/labs/_projects/p5-sketch-maker/sketch-maker-frontend/src/components/sketch.js\";\nimport React from \"react\";\nimport Sketch from \"react-p5\";\nimport urls from \"./data\";\n/*just testing importing data from other components*/\n\nexport default (props => {\n  let angle = props.angle;\n\n  const setup = (p5, canvasParentRef) => {\n    // use parent to render the canvas in this ref\n    // (without that p5 will render the canvas outside of your component)\n    p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(canvasParentRef);\n    let canvas = document.querySelector(\"#defaultCanvas0\");\n    canvas.toBlob(b => {\n      const reader = new FileReader();\n      reader.readAsText(blobToFile(b, \"img\")); // debugger;\n      // console.log(reader.result)\n\n      reader.onload = () => {\n        fetch(\"http://localhost:3001/sketches\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          // body: JSON.stringify({name: \"name\", imgBlob: blobToFile(b, \"img\")})\n          body: reader.result\n        });\n      };\n    });\n    p5.angleMode(p5.DEGREES);\n    p5.rectMode(p5.CENTER); // debugger;\n  };\n\n  const draw = p5 => {\n    p5.background(200, 60, 60);\n    p5.translate(p5.width * 0.5, p5.height * 0.5);\n    p5.rotate(angle);\n    p5.textAlign(p5.CENTER, p5.CENTER);\n    p5.textSize(30);\n    p5.text(\"Hello from p5.js\", 0, 0);\n    angle += props.rotateRate;\n  };\n\n  const windowResized = p5 => {\n    p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\n  };\n\n  const blobToFile = (blob, fileName) => {\n    blob.lastModifiedDate = new Date();\n    blob.name = fileName;\n    return blob;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sketch, {\n    setup: setup,\n    draw: draw,\n    windowResized: windowResized\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 12\n  }, this);\n});","map":{"version":3,"sources":["/mnt/c/Users/Zach/dev/flatiron/labs/_projects/p5-sketch-maker/sketch-maker-frontend/src/components/sketch.js"],"names":["React","Sketch","urls","props","angle","setup","p5","canvasParentRef","createCanvas","windowWidth","windowHeight","parent","canvas","document","querySelector","toBlob","b","reader","FileReader","readAsText","blobToFile","onload","fetch","method","headers","body","result","angleMode","DEGREES","rectMode","CENTER","draw","background","translate","width","height","rotate","textAlign","textSize","text","rotateRate","windowResized","resizeCanvas","blob","fileName","lastModifiedDate","Date","name"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAA0B;;AAE1B,gBAAgBC,KAAD,IAAW;AACtB,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;;AAEA,QAAMC,KAAK,GAAG,CAACC,EAAD,EAAKC,eAAL,KAAyB;AACnC;AACA;AACAD,IAAAA,EAAE,CAACE,YAAH,CAAgBF,EAAE,CAACG,WAAnB,EAAgCH,EAAE,CAACI,YAAnC,EAAiDC,MAAjD,CAAwDJ,eAAxD;AACA,QAAIK,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,CAAb;AAEAF,IAAAA,MAAM,CAACG,MAAP,CAAcC,CAAC,IAAI;AACf,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,UAAP,CAAkBC,UAAU,CAACJ,CAAD,EAAI,KAAJ,CAA5B,EAFe,CAGf;AAEA;;AACAC,MAAAA,MAAM,CAACI,MAAP,GAAgB,MAAM;AACtBC,QAAAA,KAAK,CAAC,gCAAD,EAAmC;AACpCC,UAAAA,MAAM,EAAE,MAD4B;AAEpCC,UAAAA,OAAO,EAAE;AACL,4BAAgB;AADX,WAF2B;AAKpC;AACAC,UAAAA,IAAI,EAAER,MAAM,CAACS;AANuB,SAAnC,CAAL;AAQH,OATG;AAUH,KAhBD;AAkBApB,IAAAA,EAAE,CAACqB,SAAH,CAAarB,EAAE,CAACsB,OAAhB;AACAtB,IAAAA,EAAE,CAACuB,QAAH,CAAYvB,EAAE,CAACwB,MAAf,EAzBmC,CA0BnC;AACH,GA3BD;;AA6BA,QAAMC,IAAI,GAAIzB,EAAD,IAAQ;AACjBA,IAAAA,EAAE,CAAC0B,UAAH,CAAc,GAAd,EAAmB,EAAnB,EAAuB,EAAvB;AACA1B,IAAAA,EAAE,CAAC2B,SAAH,CAAa3B,EAAE,CAAC4B,KAAH,GAAS,GAAtB,EAA2B5B,EAAE,CAAC6B,MAAH,GAAU,GAArC;AACA7B,IAAAA,EAAE,CAAC8B,MAAH,CAAUhC,KAAV;AACAE,IAAAA,EAAE,CAAC+B,SAAH,CAAa/B,EAAE,CAACwB,MAAhB,EAAwBxB,EAAE,CAACwB,MAA3B;AACAxB,IAAAA,EAAE,CAACgC,QAAH,CAAY,EAAZ;AACAhC,IAAAA,EAAE,CAACiC,IAAH,CAAQ,kBAAR,EAA4B,CAA5B,EAA+B,CAA/B;AACAnC,IAAAA,KAAK,IAAGD,KAAK,CAACqC,UAAd;AACH,GARD;;AAUA,QAAMC,aAAa,GAAInC,EAAD,IAAQ;AAC1BA,IAAAA,EAAE,CAACoC,YAAH,CAAgBpC,EAAE,CAACG,WAAnB,EAAgCH,EAAE,CAACI,YAAnC;AACH,GAFD;;AAOA,QAAMU,UAAU,GAAG,CAACuB,IAAD,EAAOC,QAAP,KAAoB;AACnCD,IAAAA,IAAI,CAACE,gBAAL,GAAwB,IAAIC,IAAJ,EAAxB;AACAH,IAAAA,IAAI,CAACI,IAAL,GAAYH,QAAZ;AACA,WAAOD,IAAP;AACH,GAJD;;AAMA,sBAAO,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAEtC,KAAf;AAAsB,IAAA,IAAI,EAAE0B,IAA5B;AAAkC,IAAA,aAAa,EAAEU;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAxDD","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport urls from \"./data\" /*just testing importing data from other components*/\r\n \r\nexport default (props) => {\r\n    let angle = props.angle;\r\n \r\n    const setup = (p5, canvasParentRef) => {\r\n        // use parent to render the canvas in this ref\r\n        // (without that p5 will render the canvas outside of your component)\r\n        p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(canvasParentRef);\r\n        let canvas = document.querySelector(\"#defaultCanvas0\")\r\n\r\n        canvas.toBlob(b => {\r\n            const reader = new FileReader();\r\n            reader.readAsText(blobToFile(b, \"img\"))\r\n            // debugger;\r\n\r\n            // console.log(reader.result)\r\n            reader.onload = () => {\r\n            fetch(\"http://localhost:3001/sketches\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                // body: JSON.stringify({name: \"name\", imgBlob: blobToFile(b, \"img\")})\r\n                body: reader.result\r\n            })\r\n        }\r\n        })\r\n\r\n        p5.angleMode(p5.DEGREES)\r\n        p5.rectMode(p5.CENTER)\r\n        // debugger;\r\n    };\r\n \r\n    const draw = (p5) => {\r\n        p5.background(200, 60, 60);\r\n        p5.translate(p5.width*0.5, p5.height*0.5);\r\n        p5.rotate(angle)\r\n        p5.textAlign(p5.CENTER, p5.CENTER);\r\n        p5.textSize(30)\r\n        p5.text(\"Hello from p5.js\", 0, 0);\r\n        angle+= props.rotateRate;\r\n    };\r\n\r\n    const windowResized = (p5) => {\r\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\r\n    }\r\n\r\n\r\n\r\n\r\n    const blobToFile = (blob, fileName) => {\r\n        blob.lastModifiedDate = new Date();\r\n        blob.name = fileName;\r\n        return blob\r\n    }\r\n \r\n    return <Sketch setup={setup} draw={draw} windowResized={windowResized}/>;\r\n};"]},"metadata":{},"sourceType":"module"}